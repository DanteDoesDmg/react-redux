{"version":3,"sources":["logo.svg","reducers/postReducer.ts","reducers/index.ts","actions/types.ts","Store.ts","components/Posts.tsx","actions/postAction.ts","components/Postform.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","items","item","rootReducer","combineReducers","posts","state","action","type","payload","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Posts","props","this","fetchPosts","nextProps","newPost","id","length","unshift","postItems","map","post","key","className","title","body","Component","connect","dispatch","fetch","then","res","json","PostForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","createPost","placeholder","postData","method","headers","JSON","stringify","Store","App","src","logo","alt","Postform","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8855c34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { FETCH_POSTS, NEW_POST, PostAction } from \"../actions/types\";\r\nexport interface State {\r\n  items: Array<any>;\r\n  item: object;\r\n}\r\nconst initialState: State = {\r\n  items: [],\r\n  item: {}\r\n};\r\n\r\nexport default function(state = initialState, action: PostAction) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload\r\n      };\r\n    default:\r\n      return {\r\n        ...state\r\n      };\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postReducer\r\n});\r\nexport default rootReducer;\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\n\r\nexport interface PostAction {\r\n  type: typeof FETCH_POSTS | typeof NEW_POST;\r\n  payload: any;\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst initialState: object = {};\r\nconst middleware: Array<any> = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postAction'\r\nimport { singlePost } from '../Interfaces';\r\nimport { AppState } from '../reducers'\r\n\r\n\r\nclass Posts extends Component {\r\n    UNSAFE_componentWillMount() {\r\n        this.props.fetchPosts()\r\n    }\r\n    props: any\r\n    UNSAFE_componentWillReceiveProps(nextProps: any) {\r\n        if (nextProps.newPost) {\r\n            nextProps.newPost.id = this.props.posts.length + 1;\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map((post: singlePost) => (\r\n            <div key={post.id}>\r\n                <h4 className='App_postTitle'>{post.title}</h4>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div className='App_posts'>\r\n                <h1>Posts</h1>\r\n                {postItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n})\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts)","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const fetchPosts = function() {\r\n  return function(dispatch: Dispatch) {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(res => res.json())\r\n      .then(posts =>\r\n        dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: posts\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const createPost = (postData: any) => (dispatch: Dispatch) => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(postData)\r\n  })\r\n    .then(res => res.json())\r\n    .then(post =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n      })\r\n    );\r\n};\r\n\r\nexport type Action = ReturnType<typeof fetchPosts>;\r\n","import React, { Component, ChangeEvent, FormEvent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postAction';\r\n\r\nclass PostForm extends Component {\r\n    props: any\r\n    state = {\r\n        title: '',\r\n        body: '',\r\n    }\r\n\r\n    onChange = (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body,\r\n        };\r\n\r\n        this.props.createPost(post)\r\n        this.setState({\r\n            title: '',\r\n            body: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Write a Post</h1>\r\n                <form className='App_newPost' onSubmit={this.onSubmit}>\r\n                    <label>Title:\r\n                        <input name='title' type='text' placeholder='Name your post' onChange={this.onChange} value={this.state.title} />\r\n                    </label>\r\n                    <label>Text:\r\n                        <textarea name='body' onChange={this.onChange} value={this.state.body} />\r\n                    </label>\r\n                    <button id='App_addpost' type='submit'>Add post</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, { createPost })(PostForm)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Provider } from 'react-redux';\nimport Store from './Store';\n\nimport Posts from './components/Posts';\nimport Postform from './components/Postform';\n\nconst store = Store\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>This is how learned React with Redux and Typescript\n        </p>\n        </header>\n        <Postform></Postform>\n        <Posts></Posts>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}